#!/bin/python3
import requests as rq
import urllib.request as ur
import sys
import yaml
import os
from src.colors import *

locale : dict = {}
PATH = "/tnam"


def loadLocales():
    global locale
    lang = os.environ['LANG'][:5]
    locale = readYaml(f'{PATH}/src/locales/{lang}.yaml')


def err(*text):
    print(Text.RED + Styles.BOLD + 'Error: ', Styles.RESET, *text, sep='')


def mark(*text):
    print(Text.YELLOW + Styles.BOLD + 'Mark: ', Styles.RESET, *text, sep='')


def init():
    mark(locale['dev'])
    try:
        os.system(f'mkdir {PATH}/temp')
        os.system(f'mkdir {PATH}/usr')
        os.system(f'touch {PATH}/usr/installed.yaml')
        writeYaml(f'{PATH}/usr/installed.yaml', {'python3-pip': 25.0})
    except FileExistsError as f:
        err(f'{f.filename} exists.')


def update():
    mark(locale['dev'])


def readYaml(path) -> dict:

    with open(f'{path}', 'r') as f:
        data = yaml.load(f, yaml.Loader)
        f.close()

    return data


def writeYaml(file, arr : dict):
    with open(file, 'w') as y:
        text = yaml.dump(arr)
        y.write(text)


def unzip(file, path):
    os.system(f'unzip -q -d {path} {file}')
    print(f'{locale['unzip']}/{file[-file[::-1].find('/'):]}')


def clearTemp():
    os.system(f'rm -rf {PATH}/temp/*')


def remove(package):
    
    try:

        x = readYaml(f'{PATH}/usr/installed.yaml')
        content : dict = x
        content.pop(package)
        
        writeYaml(f'{PATH}/usr/installed.yaml', content)

        os.system(f'dpkg --refuse-all -r {package}')

    except KeyError:
        err(locale['packageNotInst'])
        return


def installedList() -> dict:

    ls = readYaml(f'{PATH}/usr/installed.yaml')
    return ls


def resourcesList() -> list:

    deb_sources = readYaml(f'{PATH}/src/sources.yaml')

    return deb_sources['deb']


def unite(package):

    ls = os.listdir(f'{PATH}/temp/{package}')
    e = lambda x: f'{PATH}/temp/{package}/' + x

    os.system(f'cat {' '.join(list(map(e, ls)))} > {package}.zip')


def filesList(resource) -> dict:
    
    with open(f'{PATH}/temp/files.yaml', 'wb') as bin:

        bin.write(x := rq.get(f'https://raw.githubusercontent.com/{resource}/files.yaml').content)
        bin.close()
    
    files = readYaml(f'{PATH}/temp/files.yaml')
    
    os.system(f'rm -rf {PATH}/temp/files.yaml')

    return files


def _install(file):
    try:
        if os.system(f'dpkg -i {file}') == 0:
            print(f'{file[-file[::-1].find('/'):]} {locale['successInst']}')
            return 0
    except:
        return 1


def install(package):

    resource = resourcesList()[0]
    if not package in list(filesList(resource).keys()):
        err(locale['packageDntExist'])
        return

    os.system(f'mkdir {PATH}/temp/{package}')
    try:
        ur.urlretrieve(f'https://raw.githubusercontent.com/{resource}/{package}/{package}.zip', f'{PATH}/temp/{package}/{package}.zip')
    except:
        pass

    for i in range(1, 10):
        try:
            ur.urlretrieve(f'https://raw.githubusercontent.com/{resource}/{package}/{package}.z0{i}', f'{PATH}/temp/{package}/{package}.z0{i}')
        except:
            break
    
    for f in os.listdir(f'{PATH}/temp/{package}'): 
        if f.endswith('.zip'):
            break
    else:
        unite(package)
    
    unzip(f'{PATH}/temp/{package}/{package}.zip', f'{PATH}/temp/{package}')

    x = readYaml(f'{PATH}/usr/installed.yaml')
    content : dict = x
    content[package] = filesList(resource)[package]
    writeYaml(f'{PATH}/usr/installed.yaml', content)
    
    _install(f'{PATH}/temp/{package}/{package}.deb')

    clearTemp()


def isSudo():
    if os.geteuid() != 0:
        err(locale['notSudo'])
        return False
    return True

def main():

    loadLocales()
    argv = sys.argv[1:]

    if not argv: 
        print(locale['intro'])
        mark(locale['help'])
        return
    
    match argv[0]:

        case 'init':
            init()

        case 'install':
            if isSudo():
                if argv[1]:
                    install(argv[1])
                else:
                    err(locale['packageEmpty'])

        case 'help':
            for l in locale['_help']:
                print(l)

        case 'remove':
            if isSudo():
                if argv[1]:
                    remove(argv[1])
                else:
                    err(locale['packageEmpty'])

        case 'update':
            if isSudo():
                update()

        case _:
            print(f'{locale['wrongCommand']} {locale['help']}')


if __name__ == '__main__':
    main()
